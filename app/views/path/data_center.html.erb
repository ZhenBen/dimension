<script type="text/javascript" src='/frontend/js/FirstPersonControls.js'></script>
<script type="text/javascript" src='/frontend/js/threex.proceduralcity.js'></script>
<script type="text/javascript" src='/frontend/js/three0.min.js'></script>

<style>

.canvas-content {
  text-align: center;
  align-items: center;

}
img{
position: absolute;
transform: translate(-50%, -50%);
top: 30%;
}

h1 {
  position: absolute;
  top: 50%;
  padding-left: 65px;
  text-align: center;
  font-size: 100px;
  font-weight: 2rem;
  z-index: 200;
  color: white;}

.btn-xlarge {
padding: 18px 40px;
font-size: 40px;
line-height: normal;
-webkit-border-radius: 8px;
   -moz-border-radius: 8px;
        border-radius: 8px;
}



#center {
  position: absolute;
  top: 80%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: rgba(0, 0, 153, 0.9);
  color: white;
  z-index: 5;
}

#center:hover {
  background: rgba(225, 225, 0, 0.5);
}

#nav{
background-color: rgba(0, 0, 0, 0.5);
border-bottom: none;
z-index: 5;
}


.affix-top .nav>li>a {
color: #000;
}

.affix-top.navbar .nav>li>a:hover,
.affix-top.navbar .navbar-brand
{
color: #333;
}


a:hover, a:focus {
color: #2a6496;
text-decoration: none;
}

.square-service-block{
position:relative;
overflow:hidden;
margin:20px auto;

}
.square-service-block a {
background-color: #3c55e7;
border-radius: 5px;
display: block;
padding: 60px 60px;
text-align: center;
width: 100%;
}
.square-service-block a:hover{
background-color: rgba(80, 178, 160, 0.9);
border-radius: 5px;
}

.ssb-icon {
color: #fff;
display: inline-block;
font-size: 28px;
margin: 0 0 20px;
}

h2.ssb-title {
color: #fff;
font-size: 20px;
font-weight: 200;
margin:0;
padding:0;
text-transform: uppercase;
}

</style>

<script>
//making the canvas fullscreen
container=document.getElementById("canvas");
var w = canvas.width = window.innerWidth;
var h = canvas.height = window.innerHeight;

var updateFcts	= [];
var scene	= new THREE.Scene();
scene.fog	= new THREE.FogExp2( 0xd0e0f0, 0.0025 );

var renderer	= new THREE.WebGLRenderer( { antialias: false } );
renderer.setSize( window.innerWidth, window.innerHeight );
container.appendChild(renderer.domElement );

//////////////////////////////////////////////////////////////////////////////////
//		comment								//
//////////////////////////////////////////////////////////////////////////////////

var camera		= new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.01, 3000)
camera.position.y	= 80

//////////////////////////////////////////////////////////////////////////////////
//		add an object and make it move					//
//////////////////////////////////////////////////////////////////////////////////
var light	= new THREE.HemisphereLight( 0xfffff0, 0x101020, 1.25 );
light.position.set( 0.75, 1, 0.25 );
scene.add( light );

var material	= new THREE.MeshBasicMaterial({ color: 0x101018 })
var geometry	= new THREE.PlaneGeometry( 2000, 2000 )
var plane	= new THREE.Mesh( geometry, material );
plane.rotation.x= - 90 * Math.PI / 180;
scene.add( plane );

//////////////////////////////////////////////////////////////////////////////////
//		comment								//
//////////////////////////////////////////////////////////////////////////////////

var city	= new THREEx.ProceduralCity()
scene.add(city)


//////////////////////////////////////////////////////////////////////////////////
//		Camera Controls							//
//////////////////////////////////////////////////////////////////////////////////
var controls	= new THREE.FirstPersonControls( camera );
controls.movementSpeed	= 20;
controls.lookSpeed	= 0.05;
controls.lookVertical	= false;
updateFcts.push(function(delta, now){
  controls.update( delta );
})

//////////////////////////////////////////////////////////////////////////////////
//		render the scene						//
//////////////////////////////////////////////////////////////////////////////////
updateFcts.push(function(){
  renderer.render( scene, camera );
})

//////////////////////////////////////////////////////////////////////////////////
//		loop runner							//
//////////////////////////////////////////////////////////////////////////////////
var lastTimeMsec= null
requestAnimationFrame(function animate(nowMsec){
  // keep looping
  requestAnimationFrame( animate );
  // measure time
  lastTimeMsec	= lastTimeMsec || nowMsec-1000/60
  var deltaMsec	= Math.min(200, nowMsec - lastTimeMsec)
  lastTimeMsec	= nowMsec
  // call each update function
  updateFcts.forEach(function(updateFn){
    updateFn(deltaMsec/1000, nowMsec/1000)
  })
})
</script>



<div style='margin: 0px; background: linear-gradient(to bottom, #a9e4f7 0%,#0fb4e7 100%); overflow: hidden;'>
  <div>
    <div id="nav" class="navbar navbar-inverse navbar-fixed-top" data-spy="affix">
      <div class="container">
          <div class="navbar-header">

        <a class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
          <i class="fa fa-bars"></i>
        </a>
        </div>
        <div class="navbar-collapse collapse">
          <ul class="nav navbar-nav">
          </ul>
        </div>
      </div>
    </div><!-- /.navbar -->
  </div><!-- /.navbar -->

  <section class="canvas-wrap">
      <div class="canvas-content">
        <%= image_tag("RBC_02.png") %>

         </br>
        <h1> Welcome to the Data Center. </h1>
        <a href="http://www.google.ca"> <button type="button" class="btn btn-success btn-xlarge active" id="center"> Enter </button></a>


      </div>
        <div id="canvas" class="game">


        </div>
  </section>
</div>

<script type="text/javascript">
//making the canvas fullscreen
container=document.getElementById("canvas");
var w = canvas.width = window.innerWidth;
var h = canvas.height = window.innerHeight;

var updateFcts	= [];
var scene	= new THREE.Scene();
scene.fog	= new THREE.FogExp2( 0xd0e0f0, 0.0025 );

var renderer	= new THREE.WebGLRenderer( { antialias: false } );
renderer.setSize( window.innerWidth, window.innerHeight );
container.appendChild(renderer.domElement );

//////////////////////////////////////////////////////////////////////////////////
//		comment								//
//////////////////////////////////////////////////////////////////////////////////

var camera		= new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.01, 3000)
camera.position.y	= 80

//////////////////////////////////////////////////////////////////////////////////
//		add an object and make it move					//
//////////////////////////////////////////////////////////////////////////////////
var light	= new THREE.HemisphereLight( 0xfffff0, 0x101020, 1.25 );
light.position.set( 0.75, 1, 0.25 );
scene.add( light );

var material	= new THREE.MeshBasicMaterial({ color: 0x101018 })
var geometry	= new THREE.PlaneGeometry( 2000, 2000 )
var plane	= new THREE.Mesh( geometry, material );
plane.rotation.x= - 90 * Math.PI / 180;
scene.add( plane );

//////////////////////////////////////////////////////////////////////////////////
//		comment								//
//////////////////////////////////////////////////////////////////////////////////

var city	= new THREEx.ProceduralCity()
scene.add(city)


//////////////////////////////////////////////////////////////////////////////////
//		Camera Controls							//
//////////////////////////////////////////////////////////////////////////////////
var controls	= new THREE.FirstPersonControls( camera );
controls.movementSpeed	= 20;
controls.lookSpeed	= 0.05;
controls.lookVertical	= false;
updateFcts.push(function(delta, now){
  controls.update( delta );
})

//////////////////////////////////////////////////////////////////////////////////
//		render the scene						//
//////////////////////////////////////////////////////////////////////////////////
updateFcts.push(function(){
  renderer.render( scene, camera );
})

//////////////////////////////////////////////////////////////////////////////////
//		loop runner							//
//////////////////////////////////////////////////////////////////////////////////
var lastTimeMsec= null
requestAnimationFrame(function animate(nowMsec){
  // keep looping
  requestAnimationFrame( animate );
  // measure time
  lastTimeMsec	= lastTimeMsec || nowMsec-1000/60
  var deltaMsec	= Math.min(200, nowMsec - lastTimeMsec)
  lastTimeMsec	= nowMsec
  // call each update function
  updateFcts.forEach(function(updateFn){
    updateFn(deltaMsec/1000, nowMsec/1000)
  })
})
</script>
